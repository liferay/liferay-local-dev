# global envs
client_extension_dir_key = os.environ.get("CLIENT_EXTENSION_DIR_KEY")
lfrdev_domain = os.environ.get("LFRDEV_DOMAIN")
repo = os.environ.get("LOCALDEV_REPO", "/repo")
workspace = os.environ.get("WORKSPACE", "/workspace")


# Function process_extension
def process_extension(
    name,
    projectPath,
    client_extension_yaml_file,
    virtual_instance_id="dxp.%s" % lfrdev_domain,
    port_forwards=[],
):
    gradlePath = projectPath.replace("/", ":")

    build_args = " ".join(
        [
            "%s/gradlew" % workspace,
            "--project-dir",
            workspace,
            ":%s:clean" % gradlePath,
            ":%s:buildDockerImage" % gradlePath,
            "--stacktrace",
            "-PserviceId=%s" % name,
            "-PvirtualInstanceId=%s" % virtual_instance_id,
            "-PlfrdevDomain=%s" % lfrdev_domain,
            "-PimageId=$EXPECTED_REF",
        ]
    )

    custom_build(
        name,
        build_args,
        deps=[
            "%s/%s" % (workspace, projectPath),
        ],
        ignore=[
            "%s/%s/.angular" % (workspace, projectPath),
            "%s/%s/bin" % (workspace, projectPath),
            "%s/%s/build" % (workspace, projectPath),
            "%s/%s/dist" % (workspace, projectPath),
            "%s/%s/node_modules" % (workspace, projectPath),
            "%s/%s/target" % (workspace, projectPath),
        ],
    )

    deploy_env = {
        "LFRDEV_DOMAIN": lfrdev_domain,
        "LOCALDEV_REPO": repo,
        "NAME": name,
        "PROJECT_PATH": projectPath,
        "VIRTUAL_INSTANCE_ID": virtual_instance_id,
        "WORKSPACE": workspace,
    }

    k8s_custom_deploy(
        name,
        "%s/scripts/k8s/delete.py 2>/dev/null && %s/scripts/k8s/create.py"
        % (repo, repo),
        "%s/scripts/k8s/delete.py" % repo,
        deps=[
            "%s/client-extensions/%s/build/clientExtension/" % (workspace, projectPath)
        ],
        apply_env=deploy_env,
        delete_env=deploy_env,
        image_deps=[name],
    )

    links = []
    resource_deps = []
    workload = "deployment"

    lcp_json_file = "%s/%s/LCP.json" % (workspace, projectPath)

    # check if lcp.json exists
    if os.path.exists(lcp_json_file):
        lcp_json = read_json(lcp_json_file)
        kind = lcp_json.get("kind", None)
        if kind == "Deployment":
            workload = "deployment"
        elif kind == "Job":
            workload = "job"
        elif kind == "CronJob":
            workload = "cronjob"
        resource_deps = lcp_json.get("dependencies", [])

    if workload != "job":
        links = [link("https://%s.%s" % (name, lfrdev_domain))]

    k8s_resource(
        labels=["Extensions"],
        port_forwards=port_forwards,
        resource_deps=["dxp.%s" % lfrdev_domain] + resource_deps,
        workload=name,
        links=links,
    )


# returns a array of paths that matched the search
# .gitignores and some common paths are ignored
def workspace_search(pattern):
    find_args = [
        "fdfind",
        "--exclude '*/build/'",
        "--exclude '*/node_modules/'",
        "--exclude '*/node_modules_cache/'",
        "--glob '%s'" % pattern,
        "%s/client-extensions" % workspace,
        "2>/dev/null",
    ]
    return str(local(" ".join(find_args))).splitlines()


# main code

# global vars that can be overridden
dxp_buildargs = {}
dxp_data_volume = None
dxp_envs = {}
dxp_resource_deps = []
user_tiltfiles = []

for user_tiltfile in workspace_search("Tiltfile*"):
    symbols = load_dynamic(user_tiltfile)

    # load extension symbols from user's workspace Tiltfile
    if symbols.get("dxp_data_volume"):
        if dxp_data_volume == None:
            dxp_data_volume = symbols["dxp_data_volume"]
        else:
            fail("dxp_data_volume alreadyed defined!")

    dxp_buildargs.update(symbols.get("dxp_buildargs", {}))
    dxp_envs.update(symbols.get("dxp_envs", {}))
    user_dxp_resource_deps = symbols.get("dxp_resource_deps", [])
    dxp_resource_deps += user_dxp_resource_deps

    user_tiltfiles.append(symbols)

# if user didn't define data volume, define one based on CLIENT_EXTENSION_DIR_KEY
if dxp_data_volume == None:
    dxp_data_volume = "dxp-data-%s" % client_extension_dir_key

# setup tilt
docker_prune_settings()
update_settings(max_parallel_updates=1)

# useful only when debugging
# watch_file("%s/k8s/endpoint/" % repo)
# watch_file("%s/k8s/workloads/" % repo)
# watch_file("%s/scripts/k8s/" % repo)

if config.tilt_subcommand == "down":
    local("kubectl delete cm -l lxc.liferay.com/metadataType=dxp")
    local("kubectl delete cm -l lxc.liferay.com/metadataType=ext-init")
    local("%s/scripts/dxp-stop.sh" % repo)

    # check user tiltfiles for a "extension_stop()" hook
    for user_tiltfile in user_tiltfiles:
        if user_tiltfile.get("on_down"):
            user_tiltfile["on_down"]()

# build and launch dxp

dxp_buildargs_val = ""
for key, value in dxp_buildargs.items():
    dxp_buildargs_val += " --build-arg %s=%s " % (key, value)

dxp_envs_val = ""
for key, value in dxp_envs.items():
    dxp_envs_val += " -e %s=%s " % (key, value)

local_resource(
    "dxp.%s" % lfrdev_domain,
    env={"DXP_BUILDARGS": dxp_buildargs_val},
    cmd="%s/scripts/dxp-build.sh" % repo,
    serve_env={
        "DXP_DATA_VOLUME": dxp_data_volume if dxp_data_volume != None else "",
        "DXP_ENVS": dxp_envs_val,
    },
    serve_cmd="%s/scripts/dxp-serve.sh" % repo,
    deps=["%s/docker/images/dxp-server" % repo],
    readiness_probe=probe(
        initial_delay_secs=120,
        timeout_secs=5,
        period_secs=5,
        failure_threshold=99,
        exec=exec_action(["%s/scripts/dxp-status.sh" % repo]),
    ),
    trigger_mode=TRIGGER_MODE_MANUAL,
    links=[
        link("https://dxp.%s" % lfrdev_domain),
        link("https://dxp.%s/o/api" % lfrdev_domain, "Liferay API Explorer"),
    ],
    labels=["DXP"],
    resource_deps=dxp_resource_deps,
)

# search for user client extension projects in user workspace

client_extension_yaml_files = workspace_search("client-extension.yaml")

tiltignores = str(
    read_file("%s/client-extensions/.tiltignore" % workspace, "")
).splitlines()

# for each client extension project, read yaml and process the extension

for client_extension_yaml_file in client_extension_yaml_files:
    project_path = os.path.dirname(client_extension_yaml_file)
    client_extension_name = os.path.basename(project_path)
    project_relative_path = os.path.relpath(project_path, "%s/" % workspace)

    if client_extension_name in tiltignores:
        continue

    # TODO call a script that can expand globs that may be passed into watch property
    # paths=local(/repo/scripts/unroll-globs.sh watch)
    # source_deps=paths

    process_extension(
        client_extension_name.replace("-", ""),
        project_relative_path,
        client_extension_yaml_file,
    )

# if user Tiltfile defines an after_all, call it
for user_tiltfile in user_tiltfiles:
    if user_tiltfile.get("after_all"):
        user_tiltfile["after_all"]()
